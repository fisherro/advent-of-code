#! "/Applications/Racket v8.3/bin/racket"
#lang racket

(require anaphoric)

(define (read-data)
  (define-values (points folds)
    (for/fold ((points (set))
               (folds '()))
              ((line (in-lines)))
      (acond ((not (non-empty-string? line))
              (values points folds))
             ((regexp-match #px"^fold along y=(\\d+)$" line)
              (define y (string->number (second it)))
              (define fold (make-rectangular 0 y))
              (values points (cons fold folds)))
             ((regexp-match #px"^fold along x=(\\d+)$" line)
              (define x (string->number (second it)))
              (define fold (make-rectangular x 0))
              (values points (cons fold folds)))
             ((regexp-match #px"^(\\d+),(\\d+)$" line)
              (match-define (list x y)
                (map string->number (rest it)))
              (define point (make-rectangular x y))
              (values (set-add points point)
                      folds)))))
  (values points (reverse folds)))

(define (split-complex c)
  (values (real-part c)
          (imag-part c)))

(define (fold-points points fold-spec)
  (define (fold-coord f p)
    (if (or (= f 0)
            (p . < . f))
        p
        (- (* 2 f)
           p)))
  (define-values (fx fy)
    (split-complex fold-spec))
  (for/set ((point points))
    (define-values (px py)
      (split-complex point))
    (make-rectangular (fold-coord fx px)
                      (fold-coord fy py))))

(define (render-points points)
  (define dot "â–ˆ")
  (define space " ")
  (define x-max (apply max (set-map points real-part)))
  (define y-max (apply max (set-map points imag-part)))
  (for* ((y (in-inclusive-range 0 y-max))
         (x (in-inclusive-range 0 x-max)))
    (when (and (= x 0)
               (not (= y 0)))
      (newline))
    (display (if (set-member? points (make-rectangular x y))
                 dot
                 space))))

(define (decode)
  (define-values (starting-points folds)
    (read-data))
  (define folded-points
    (for/fold ((points starting-points))
              ((fold-spec folds))
      (fold-points points fold-spec)))
  (render-points folded-points)
  (newline))

(decode)