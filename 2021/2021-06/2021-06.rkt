#lang racket

(require "../qtest.rkt")
(require srfi/26)
(require anaphoric)

(define (wl x)
  ;(writeln x)
  x)

(define test-input "3,4,3,1,2")
(define test-data (map string->number (string-split test-input ",")))

(define (part1 data days)
  (length (for/fold ((fishes data))
                    ((day (in-inclusive-range 1 days)))
            (wl (flatten (map (λ (fish)
                                (cond ((= fish 0)
                                       (list 6 8))
                                      (else
                                       (sub1 fish))))
                              fishes))))))

(define (read-data file)
  (with-input-from-file file
    (thunk
     (filter number?
             (map (compose1 string->number bytes->string/utf-8)
                  (regexp-split #px"\\D" (current-input-port)))))))

(qtest (part1 test-data 18) 26)
(qtest (part1 test-data 80) 5934)
(qtest (part1 (read-data "input.txt") 80))

(define (part2 data days)
  (define table (for/list ((i (in-inclusive-range 0 6)))
                  (list i (part1 (list i) days))))
  (apply + (map (λ (datum)
                  (second (assoc datum table)))
                data)))

(qtest (part2 test-data 18) 26)
(qtest (part2 test-data 80) 5934)
(qtest (part2 (read-data "input.txt") 80) 388739)
;(qtest (part2 test-data 256) 26984457539)

; The good news is that there's only 5 numbers we need to handle:
(sort (remove-duplicates (read-data "input.txt")) <)

; Given a single fish at "age" 8,
; I can determine how many children it will have over X days.
; (quotient (- x 2) 7)
;
; Adjusted for starting value, n:
; (quotient (+ x (- 6 n)) 7)
;
; I could apply that to each child subtracting off days...
; and then it would have to be applied recursively.

(define (calc-children start days)
  (quotient (+ days (- 6 start)) 7))

; This still takes a while, but it uses a tractable about of memory.
(define (calc-descendants start days)
  (define adjusted-days (+ days (- 6 start)))
  (let loop ((current-days (- adjusted-days 7))
             (count 1))
    (if (current-days . < . 0)
        count
        (loop (- current-days 7)
              (+ count (calc-descendants 8 current-days))))))

(qtest (part1 '(8) 80))
#;(qtest (calc-descendants 8 256))

; Make a lookup table for the values in input.txt:
#|
(define part2-table
  (for/list ((i '(1 2 3 4 5)))
    (list i (calc-descendants i 256))))
(println "Table done!")
(writeln part2-table)
|#
; The table generated by the code above:
(define part2-table '((1 6206821033) (2 5617089148) (3 5217223242) (4 4726100874) (5 4368232009)))

(define (part2-take2 data)
  (apply + (map (λ (datum)
                  (second (assoc datum part2-table)))
                data)))

(qtest (part2-take2 test-data) 26984457539)
(qtest (part2-take2 (read-data "input.txt")))