#lang racket

; I've done a clean-up & refactor since originally solving this.

(require "../qtest.rkt")
(require graph)
(require math/array)
(require math/matrix)
(require srfi/26)
(require threading)

(define (mapmap f lol)
  (map (cute map f <>) lol))

(define (read-data file)
  (with-input-from-file file
    (thunk
     (for/list ((line (in-lines)))
       (~> (string->list line)
           (map string _)
           (map string->number _))))))

(define (expand-data lol)
  (define (increment-lol lol n)
    (define (zero->nine n)
      (if (= 0 n) 9 n))
    (mapmap (λ~> (+ n)
                 (modulo 9)
                 zero->nine)
            lol))
  (define (expand-data-across lol)
    (for/list ((i (in-range 0 5)))
      (increment-lol lol i)))
  (define (expand-data-down lolol)
    (for/list ((i (in-range 0 5)))
      (map (cute increment-lol <> i) lolol)))
  (define (combine-data lololol)
    (apply append
           (map (λ~> (cons append _)
                     (apply map _))
                lololol)))
  (~> (expand-data-across lol)
      (expand-data-down _)
      (combine-data _)))

(define (matrix->graph m)
  (define (index-update index which updater)
    (match-define (vector r c) index)
    (if (symbol=? 'row which)
        (vector (updater r) c)
        (vector r (updater c))))
  (define (valid-index? i)
    (match-define (vector r c) i)
    (define num-rows (matrix-num-rows m))
    (define num-cols (matrix-num-cols m))
    (and (r . >= . 0)
         (c . >= . 0)
         (r . < . num-rows)
         (c . < . num-cols)))
  (define (make-edge s d)
    (cond ((valid-index? d)
           (list (array-ref m d) s d))
          (else #f)))
  (define edges
    (for/fold ((edges '()))
              ((index (in-array-indexes (array-shape m))))
      (~> (list (make-edge index (index-update index 'row add1))
                (make-edge index (index-update index 'col add1))
                (make-edge index (index-update index 'row sub1))
                (make-edge index (index-update index 'col sub1)))
          (filter values _)
          (append _ edges))))
  (weighted-graph/directed edges))

(define (solve risk-map)
  (define m (list*->matrix risk-map))
  (define g (matrix->graph m))
  (define-values (hash1 hash2)
    (dijkstra g #(0 0)))
  (define destination
    (vector (sub1 (matrix-num-rows m))
            (sub1 (matrix-num-cols m))))
  (hash-ref hash1 destination))

(define (part1 file)
  (solve (read-data file)))

(define (part2 file)
  (define risk-map
    (~> (read-data file)
        (expand-data _)))
  (solve risk-map))

(qtest (part1 "test.txt") 40)
(qtest (part1 "input.txt") 685)
(qtest (part2 "test.txt") 315)
(qtest (part2 "input.txt") 2995)